[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "parts-service"
version = "0.1.0"
description = "A Python 3.13 AWS Lambda service for parts CRUD operations"
readme = "README.md"
requires-python = ">=3.13"
license = { file = "LICENSE" }
authors = [
    { name = "Parts Team", email = "parts-team@example.com" },
]
dependencies = [
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "bandit[toml]>=1.7.5",
    "boto3-stubs[dynamodb]>=1.34.0",
    "types-python-dateutil>=2.8.19",
    "moto[dynamodb]>=4.2.0",
]

[tool.hatch.version]
path = "src/parts_service/__init__.py"

[tool.ruff]
line-length = 88
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "S",   # flake8-bandit
    "C4",  # flake8-comprehensions
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "RUF", # Ruff-specific rules
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "S101", # Use of assert detected (allow in tests)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "D103", "D102", "D101"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
strict_optional = true
no_implicit_optional = true
plugins = []
files = ["src/", "tests/"]

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "moto.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=src/parts_service --cov-report=term-missing --cov-report=xml --cov-fail-under=60"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used check

[tool.coverage.run]
source = ["src/parts_service"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]